DAY-01: 09-10-2023

INTRO, ANALYSIS, ARCHITECTURE, SETUP & SOME BASIC COMMANDS

MONOLITHIC: SINGLE APP -- > SINGLE SERVER -- > SINGLE DB
MICRO SERVICES: SINGLE APP -- > MULTIPLE SERVERS -- > MULTIPLE DB

containerization: Process of packing application with its dependencies.
EX: PUBG 
BEFORE CONTAINARIZATION: [APP=PLAYSTORE MAPS=INTERNET]
AFTER CONTAINARIZATION: [APP(MAPS) = PLAYSTORE]

CAKE=BAKERY & KINFE=STORE
SWIGGY= CAKE & KNIFE 


LIMITATIONS:
1. DEPENDCY
2. SCALE
3. SLOW DEVELOPMENT
4. TESTING 


WHY MICRO SERVICES :
CLOSTLY -- > SOLUTION

SERVERS = CONTAINERS

CONTAINERS:
it is used to create, run and deploy application.
conatiainers are advance than servers.
these are light weighted components.

IMAGE:
it will have os which req to run our container.
os -- > pkgs -- > deploy

DOCKER:
its a tool used to create containers.
its a free and opensoure platfrom to create containers.
its platfrom independent.
docker runs on any os but natively supports linux distributions.
it is used to containerize the application.
language: GO LANG
Year: 2013
Who: Solomen Hykes and Sebastian Phal
befor docker user faced lot of issues, after docker users are not facing the issues.


DOCKER COMPONENTS:
DOCKER CLIENT: it interacts with us (command -- > execute -- > output)
DOCKER HOST: Where we install docker (Ec2, Laptop, Vm)
DOCKER DAEMON: manages all docker components (Conatiners, Images, Volume)
DOCKER REGISTRY: it manages all the docker images.

INSTALLATION:
yum install docker -y
systemctl start docker
systemctl status docker
docker version

COMMANDS:
docker images		: to show list of images
docker pull amazonlinux	: to get image amazonlinux from dockerhub
docker run -it --name cont1 amazonlinux : to create container

ls
yum install git maven tree httpd -y
check the version
touch file{1..10}

ctrl p q		: to exit from container
docker search ubuntu	: to search images
docker ps -a		: to list all containers
docker ps 		: to list runnings containers
docker stop cont1	: to stop the container
docker start cont1	: to start the container
docker attach cont1	: to go inside the container
docker inspect cont1	: to get the complete info container

HISTORY:
 1  yum install docker -y
    2  systemctl start docker
    3  systemctl status docker
    4  docker version
    5  docker images
    6  cd /
    7  du -sh
    8  docker pull amazonlinux2
    9  docker pull amazonlinux
   10  docker images
   11  docker run -it --name cont1 amazonlinux
   12  docker search redhat
   13  docker search ubuntu
   14  docker ps -a
   15  docker attach cont1
   16  docker ps -a
   17  docker stop cont1
   18  docker ps -a
   19  docker ps
   20  docker start cont1
   21  docker ps
   22  docker inspect cont1
   23  docker stats
   24  history
===========================================
DAY-02: 10-10-2023
DOCKER FILE

CONTAINARIZATION: OS-LEVEL OF VIRTUALIZATION

docker pull ubuntu
docker run -it --name cont1 ubuntu
ls
apt update -y
apt install maven git tree apache2 -y
touch file{1..10}
apt install vim -y
docker commit cont1 raham:v1
check the pkgs and file

Above method is worst method.
because its manual method.


DOCKER FILE:
it is used to automate image creation.
we write the Dockerfile we can reuse it.
inside Dockerfile we use components to do our works.
Components will be on Capital Letter.
in Dockerfile D will be capital.
to create image from file we need to build it.

FROM		: to get the os for conatiner.
RUN		: to execute linux commands(image creation)
CMD		: to execute linux commands(container creation)
ENTRYPOINT	: high priority than CMD
COPY		: it will copy local files to conatiner.
ADD		: it will copy internet files to conatiner.
WORKDIR		: to go specific foilder inside container
LABEL		: used to attach labels for image
ENV		: to pass env variables inside the container
ARGS		: to pass env variables outside the container
EXPOSE		: used to allocate port number


EX-1:

vim Dockerfile

FROM ubuntu
RUN apt update -y
RUN apt install git maven tree apache2 -y
RUN touch file1

docker build -t raham:v2 .
docker run -it --name cont3 raham:v2


EX-2:

FROM ubuntu
RUN apt update -y
RUN apt install git maven tree apache2 -y
RUN touch file1
RUN apt install default-jre -y
CMD ["java", "-version"]

docker build -t raham:v3 .
docker run -it --name cont4 raham:v3

EX-3:

FROM ubuntu
COPY index.html /tmp
ADD https://dlcdn.apache.org/tomcat/tomcat-9/v9.0.80/bin/apache-tomcat-9.0.80.tar.gz /tmp


docker build -t raham:v4 .
docker run -it --name cont5 raham:v4


EX-4:

FROM ubuntu
COPY index.html /tmp
ADD https://dlcdn.apache.org/tomcat/tomcat-9/v9.0.80/bin/apache-tomcat-9.0.80.tar.gz /tmp
WORKDIR /tmp
LABEL author Raham

docker build -t raham:v5 .
docker run -it --name cont6 raham:v5
docker inspect cont6

EX-5:

FROM ubuntu
COPY index.html /tmp
ADD https://dlcdn.apache.org/tomcat/tomcat-9/v9.0.80/bin/apache-tomcat-9.0.80.tar.gz /tmp
WORKDIR /tmp
LABEL author Raham
ENV client swiggy
ENV server prod

docker build -t raham:v6 .
docker run -it --name cont7 raham:v6

BASIC DEPLOY:

vim Dockerfile

FROM ubuntu
RUN apt update -y
RUN apt install apache2 -y
COPY index.html /var/www/html
CMD ["/usr/sbin/apachectl", "-D", "FOREGROUND"]

docker build -t devopsbyraham:v1 .
docker run -itd --name cont10 -p 81:80 devopsbyraham:v1


HISTORY:
1  yum install docker -y
    2  systemctl start docker.service
    3  systemctl status docker.service
    4  docker pull ubuntu
    5  docker images
    6  docker run -it --name cont1 ubuntu
    7  docker ps
    8  docker images
    9  docker commit cont1 raham:v1
   10  docker images
   11  docker run -it --name cont2 raham:v1
   12  vim Dockerfile
   13  cat Dockerfile
   14  ll
   15  docker build -t raham:v2 .
   16  docker images
   17  docker run -it --name cont3 raham:v2
   18  vim Dockerfile
   19  docker build -t raham:v3 .
   20  docker run -it --name cont4 raham:v3
   21  docker ps
   22  vim Dockerfile
   23  docker build -t raham:v4 .
   24  ll
   25  vim index.html
   26  docker build -t raham:v4 .
   27  docker run -it --name cont5 raham:v4
   28  vim index.html
   29  vim Dockerfile
   30  docker build -t raham:v5 .
   31  docker run -it --name cont6 raham:v5
   32  docker inspect cont6
   33  vim Dockerfile
   34  docker build -t raham:v6 .
   35  docker run -it --name cont7 raham:v6
   36  vim Dockerfile
   37  docker build -t raham:v7 .
   38  docker run -it --name cont8 raham:v7
   39  docker inspect cont8 | grep -i arg
   40  docker inspect cont8
   41  docker inspect cont8 | grep -i subject
   42  docker ps
   43  vim Dockerfile
   44  docker build -t raham:v7 .
   45  docker run -it --name cont9 raham:v7
   46  docker ps
   47  vim Dockerfile
   48  rm -rf *
   49  vim index.html
   50  vim Dockerfile
   51  docker build -t devopsbyraham:v1 .
   52  docker run -itd --name cont10 -p 81:80 devopsbyraham:v1
   53  docker run -itd --name cont11 -p 82:80 devopsbyraham:v1
   54  docker run -it --name cont12 ubuntu
   55  history
=========================================

DAY-03: 11-10-2023

VOLUME:
in conatiner if we want to store data we can use volumes.
volume is nothing but a folder in container.
volume can be shared to multiple containers.
At a time we can share single volume.
data inside volume will store on local.
volumes are loosely coupled to conatainer.

1. DOCKER FILE:

FROM ubuntu
VOLUME ["/volume1"]

docker build -t raham:v1 .
docker run -it --name cont1 raham:v1
cd volume1
touch file{1..10}
ctrl p q
docker run -it --name cont2 --volumes-from cont1 --privileged=true ubuntu
cd volume1
touch file{11..20}
ctrl p q
docker attach cont1
ll

===================================================================================

2. MOUNT VOLUME: 
volume we create locally the we add for conatier

docker volume ls
docker volume create volume2
docker volume inspect volume2
cd /var/lib/docker/volumes/volume2/_data
touch python{1..10}
docker run -it --name cont4 --mount source=volume3,destination=/abc ubuntu

========================================================================

3. CLI:
docker run -it --name cont5 -v /volume4 ubuntu
cd volume4
touch php{1..10}
docker run -it --name cont6 --volumes-from cont5 --privileged=true ubuntu


4. SHARING LOCAL FILES

cd 
touch raham{1..10}
docker volume inspect volume3
cp * /var/lib/docker/volumes/volume3/_data
docker attach cont4
cd volume3
ll

5. LOCAL FILES -- > VOLUME -- > CONTAINER

docker run -it --name cont10 -v /root:/volume5 ubuntu


DOCKER SYSTEM COMMANDS:
to know the docker components resource utilization
docker system df
docker system df -v

docker ps -a -q
docker kill $(docker ps -a -q)
docker rm $(docker ps -a -q)
docker rmi -f $(docker images -q)
==========================================================
DAY-04: 12-10-2023
DOCKER COMPOSE & DOCKER HUB

vim Dockerfile

FROM ubuntu
RUN apt update -y
RUN apt install apache2 -y
COPY index.html /var/www/html
CMD ["/usr/sbin/apachectl", "-D", "FOREGROUND"]

Index.html: https://www.w3schools.com/howto/tryit.asp?filename=tryhow_css_form_icon

docker build -t movies:v1 .
docker run -itd --name cont1 -p 81:80 movies:v1

docker build -t train:v1 .
docker run -itd --name cont2 -p 82:80 train:v1

docker build -t dth:v1 .
docker run -itd --name cont3 -p 83:80 dth:v1

docker build -t recharge:v1 .
docker run -itd --name cont4 -p 84:80 recharge:v1


DOCKER COMPOSE:
it is a tool used to create multiple conatiners.
it will work on single host.
we can write a file called docker-compose which will be on yaml format.
in that file we can write services info (images, port, volume, replicas)

SETUP:
sudo curl -L "https://github.com/docker/compose/releases/download/1.29.1/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
ls /usr/local/bin/
sudo ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose
sudo chmod +x /usr/local/bin/docker-compose
docker-compose version


vim docker-compose.yml

version: '3.8'
services:
  movies:
    image: movies:v1
    ports:
      - "81:80"
  train:
    image: train:v1
    ports:
      - "82:80"
  dth:
    image: dth:v1
    ports:
      - "83:80"
  recharge:
    image: recharge:v1
    ports:
      - "84:80"


docker-compose up -d		: to create and start containers
docker-compose stop		: to stop containers
docker-compose start		: to start containers
docker-compose kill		: to kill containers
docker-compose rm		: to delete containers
docker-compose down		: to stop and delete containers
docker-compose pause		: to pause containers
docker-compose unpause		: to unpause containers
docker-compose ps		: to show containers of compose file
docker-compose top		: to show process runnning inside the containers 
docker-compose logs		: to show logs of containers 
docker-compose scale train=10	: to scale train containers


CHANGING DEFALUT FILE:

Supported filenames: docker-compose.yml, docker-compose.yaml, compose.yml, compose.yaml
mv docker-compose.yml raham.yml

docker-compose -f raham.yml down
docker-compose -f raham.yml up -d
docker-compose -f raham.yml ps


DOCKERHUB:
its a place where we can store all images
docker hub is nothing but docker registry
we can store our images centrally
once we push image to docker hub we can access from anywhere

PROCESS:
create image
docker tag image username/repo
docker push username/repo

HISTORY:
      1  cat Dockerfile
    2  docker run -itd --name cont1 -p 81:80 movies:v1
    3  vim index.html
    4  docker build -t train:v1 .
    5  docker run -itd --name cont2 -p 82:80 train:v1
    6  vim index.html
    7  docker build -t dth:v1 .
    8  docker run -itd --name cont3 -p 83:80 dth:v1
    9  vin index.html
   10  vim index.html
   11  docker build -t recharge:v1
   12  docker build -t recharge:v1  .
   13  docker run -itd --name cont4 -p 84:80 recharge:v1
   14  docker-compose
   15  sudo curl -L "https://github.com/docker/compose/releases/download/1.29.1/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
   16  ls /usr/local/bin/
   17  sudo ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose
   18  sudo chmod +x /usr/local/bin/docker-compose
   19  docker-compose version
   20  docker-compose
   21  docker ps -a
   22  docker ps -a -q
   23  docker kill $(docker ps -a -q)
   24  docker rm $(docker ps -a -q)
   25  docker ps -a
   26  docker images
   27  vim docker-compose.yml
   28  ll
   29  docker-compose up -d
   30  docker ps
   31  docker-compose stop
   32  docker ps
   33  docker ps -a
   34  docker-compose start
   35  docker ps -a
   36  docker-compose kill
   37  docker ps -a
   38  docker-compose rm
   39  docker ps -a
   40  docker-compose up -d
   41  docker ps -a
   42  docker-compose down
   43  docker ps -a
   44  docker-compose up -d
   45  docker ps -a
   46  docker-compose pause
   47  docker ps -a
   48  docker-compose unpause
   49  docker run -itd --name cont1 ubuntu
   50  docker run -itd --name cont2 ubuntu
   51  docker run -itd --name cont3 ubuntu
   52  docker run -itd --name cont4 ubuntu
   53  docker ps -a
   54* docker-compose top
   55  top
   56  docker top cont1
   57  docker-compose top
   58  docker-compose logs
   59  docker-compose scale train=10
   60  docker-compose ps
   61  ll
   62  mv docker-compose.yml raham.yml
   63  rm -rf Dockerfile index.html
   64  ll
   65  docker-compose down
   66  docker-compose -f raham.yml down
   67  docker-compose -f raham.yml up -d
   68  docker-compose -f raham.yml ps
   69  vim raham.yml
   70  docker volume create volume1
   71  mv raham.yml docker-compose.yml
   72  docker-compose up -d
    1  docker images
    2  docker tag movies:v1 venkatesh1826/movies
    3  docker images
    4  docker push venkatesh1826/movies
    5  docker login
    6  docker push venkatesh1826/movies
    7  docker images
    8  docker tag train:v1 venkatesh1826/train
    9  docker push venkatesh1826/train
   10  docker tag dth:v1 venkatesh1826/dth
   11  docker push venkatesh1826/dth
   12  docker tag recharge:v1 venkatesh1826/recharge
   13  docker push venkatesh1826/recharge
   14  docker history movies:v1
   15  docker rmi -f $(docker images -q)
   16  docker ps -a
   17  docker-compose down
   18  docker kill $(docker ps -a -q)
   19  docker rm $(docker ps -a -q)
   20  docker rmi -f $(docker images -q)
   21  docker images
   22  docker ps
   23  docker ps -a
   24  docker run -itd --name cont1 -p 81:80 venkatesh1826/movies:latest
   25  history

=======================================================================
DAY-05: 13-10-2023
DOCKER SWARM AND JENKINS

DOCKER SWARM:
HIGH AVAILABILITY: MORE THAN ONE SERVER IN DIFF AZ

its an orchestration tool for containers.
it is cluster used to manage containers.
Cluster means group of servers.
Cluster will have manager and worker nodes.
Multiple servers will have same container.
if we can access container from one server we can acces from another server.
manager node will distribute containers worker node.
worker node will maintain containers.


SETUP: 
1. CREATE 3 SERVERS AND INSTALL DOCKER
2. SET HOSTNAMES (hostnamectl set-hostname manager/worker1/worker2)
3. GO TO MANAGER NODE (docker swarm init) -- > copy token to all nodes
4. docker node ls

SERVICES:
its used to manage containers in swarm.
it will help to create replicas of containers.
replica means copy of container.
it will scale easily.
it can self-heal (container -- > delete -- > recreate)

docker service create --name movies --replicas 3 -p 81:80 venkatesh1826/movies:latest
docker service ls
docker service ps movies
docker service inspect movies
docker service scale movies=10
docker service scale movies=3
docker service rollback movies
docker service logs movies
docker service rm movies

docker service create --name train --replicas 6 --publish 82:80 venkatesh1826/train:latest

CLUSTER ACTIVITIES:

docker swarm leave (worker node) -- > removes the worker from cluster
docker node rm node-Id(Manager) -- > to remove the node which is on down status
docker swarm joint-token manager

docker run -it --name jenkins -p 8080:8080 jenkins/jenkins:lts

HISTORY:
 1  docker swarm init
    2  docker node ls
    3  docker run -itd --name cont1 -p 81:80 venkatesh1826/movies:latest
    4  docker ps -a
    5  docker kill cont1
    6  docker rm cont1
    7  docker ps -a
    8  docker service create --name movies --replicas 3 -p 81:80 venkatesh1826/movies:latest
    9  docker ps -a
   10  docker service ps movies
   11  docker service ls
   12  docker service inspect movies
   13  docker service ps  movies
   14  docker service create --name train --replicas 6 --publish 82:80 venkatesh1826/train:l                                                                                                                                                                                                                                                                                    atest
   15  docker service ls
   16  docker service ps train
   17  docker service ls
   18  docker ps -a
   19  docker service ls
   20  docker service l
   21  docker service ls
   22  docker ps -a
   23  docker service scale movies=10
   24  docker service ls
   25  docker service ps movies
   26  docker service scale movies=3
   27  docker service rollback movies
   28  docker service logs movies
   29  docker service ls
   30  docker service rm movies
   31  docker service ls
   32  docker node ls
   33  docker node rm ni12vw6jp4japgh2twsfe47w8
   34  docker node ls
   35  docker node rm ao6es8j7qizty3a518enpghoo
   36  docker node ls
   37  docker node rm zrojyioso7kotb3c0ii5b98m9
   38  docker node ls
   39  docker ps
   40  docker node ls
   41  docker service ps movies
   42  docker service ps train
   43  docker service scale train=10
   44  docker service
   45  docker run -it --name jenkins -p 8080:8080 jenkins/jenkins:lts
   46  history
